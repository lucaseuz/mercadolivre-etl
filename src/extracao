import requests
from bs4 import BeautifulSoup
import pandas as pd
import sqlite3
import os
import time
from sqlalchemy import create_engine

HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36',
    'Accept-Language': 'pt-BR,pt;q=0.9'
}

def criar_banco_dados():
    """Cria o banco de dados e a tabela se não existirem"""
    conn = sqlite3.connect('data/produtos.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS produtos
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  marca TEXT,
                  produto TEXT,
                  preco REAL,
                  avaliacao REAL,
                  link TEXT,
                  data_coleta TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    conn.commit()
    conn.close()

def extrair_dados():
    produtos = []
    
    for pagina in range(5):
        url = f'https://lista.mercadolivre.com.br/whey-protein-isolado_Desde_{1 + pagina * 50}'
        print(f'Extraindo página {pagina + 1}...')
        
        try:
            response = requests.get(url, headers=HEADERS)
            response.raise_for_status()
            
            # Verificação adicional de conteúdo
            if response.status_code != 200 or "mercadolivre" not in response.text.lower():
                print(f"Possível bloqueio na página {pagina + 1}")
                continue
                
            soup = BeautifulSoup(response.text, 'html.parser')
            items = soup.find_all('li', class_='ui-search-layout__item')
            
            if not items:
                print(f"Nenhum item encontrado na página {pagina + 1}")
                continue
                
            for item in items:
                try:
                    # Extração com verificações de segurança
                    marca_element = item.find('span', class_='poly-component__brand')
                    marca = marca_element.get_text(strip=True) if marca_element else "Sem marca"
                    
                    produto_element = item.find('h3', class_='poly-component__title-wrapper')
                    produto = produto_element.get_text(strip=True) if produto_element else "Produto não identificado"
                    
                    link_element = item.find('a', class_='ui-search-link')
                    link = link_element['href'] if link_element and 'href' in link_element.attrs else "#"
                    
                    # Tratamento do preço com fallback completo
                    preco_inteiro = item.find('span', class_='andes-money-amount__fraction')
                    preco_decimal = item.find('span', class_='andes-money-amount__cents')
                    
                    if preco_inteiro:
                        valor_inteiro = preco_inteiro.get_text(strip=True).replace('.', '')
                        valor_decimal = preco_decimal.get_text(strip=True) if preco_decimal else '00'
                        preco = float(f"{valor_inteiro}.{valor_decimal}")
                    else:
                        preco = 0.0
                    
                    # Tratamento da avaliação com fallback
                    avaliacao_element = item.find('span', class_='poly-reviews__rating')
                    avaliacao = float(avaliacao_element.get_text(strip=True)) if avaliacao_element else None
                    
                    produtos.append({
                        'marca': marca,
                        'produto': produto,
                        'preco': preco,
                        'avaliacao': avaliacao,
                        'link': link
                    })
                    
                except Exception as e:
                    print(f"Erro processando item: {str(e)}")
                    continue
                    
            time.sleep(5)  # Aumente o delay para 5 segundos
            
        except Exception as e:
            print(f'Erro crítico na página {pagina + 1}: {str(e)}')
    
    return produtos

def salvar_dados(produtos):
    # Salvar em CSV
    os.makedirs('data/processed', exist_ok=True)
    df = pd.DataFrame(produtos)
    df.to_csv('data/processed/produtos.csv', index=False, encoding='utf-8-sig')
    
    # Salvar no SQLite
    engine = create_engine('sqlite:///data/produtos.db')
    df.to_sql('produtos', engine, if_exists='replace', index=False)
    
    print("Dados salvos com sucesso em CSV e SQLite!")

if __name__ == '__main__':
    criar_banco_dados()
    dados = extrair_dados()
    if dados:
        salvar_dados(dados)
    else:
        print("Nenhum dado foi extraído.")